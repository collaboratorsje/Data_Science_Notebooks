# -*- coding: utf-8 -*-
"""Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vjikMnRWB2BVlqfzrrGlyqeKFKi-Y6JF
"""

pip install ISLP

import numpy as np
import pandas as pd
import statsmodels.api as sm
from ISLP import load_data
from ISLP.models import (ModelSpec as MS, summarize)

from ISLP import confusion_table

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
from sklearn.naive_bayes import GaussianNB as NB
from sklearn.neighbors import KNeighborsClassifier as KNN

"""# Load dataset"""

data = load_data('Smarket')
data.head(5)

predictors = data.columns.drop(['Direction', 'Year', 'Volume', 'Today'])
design = MS(predictors)
X = design.fit_transform(data)
y = data.Direction == 'Up'

X.head(5)

y.head(5)

"""# Logistic Regression"""

lr_model = sm.GLM(y, X, family=sm.families.Binomial()) # Create the LR model
result = lr_model.fit() # train the LR model
summarize(result)

lr_pred = result.predict()
labels = np.array(['Down'] * len(data))
labels[lr_pred > 0.5] = 'Up'
confusion_table(labels, data.Direction)

(116+550)/(116+550+486+98)

"""# LDA"""

X = X.drop(['intercept'], axis=1)
X.head(5)

lda_model = LDA()
lda_model.fit(X, y)
lda_pred = lda_model.predict(X)
confusion_table(lda_pred, y)

(113+550)/(113+98+489+550)

"""# Naive Bayes"""

nb_model = NB() # create the model
nb_model.fit(X, y) # train the model
nb_pred = nb_model.predict(X) # test the model
confusion_table(nb_pred, y)

(129+547)/(129+101+473+547)

"""# KNN"""

knn_model = KNN(n_neighbors=3) # create the model
knn_model.fit(X, y) # train the model
knn_pred = knn_model.predict(X) # test the model
confusion_table(knn_pred, y) # show the confusion matrix

(441+497)/(441+151+161+497)